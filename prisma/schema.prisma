generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
model User {
  id              Int         @id @default(autoincrement())
  username        String      @unique
  password        String?
  email           String?     @unique
  emailCertified  Boolean     @default(false)
  name            String?
  mobile          String?     @unique
  mobileCertified Boolean     @default(false)
  avatar          String?
  socialOnly      Boolean     @default(false)
  socialInfo      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          SMSToken[]
  products        Product[]
  posts           Post[]
  Comments        Comment[]
  Likes           Like[]
  chat_rooms      ChatRoom[]
  messages        Message[]
  LiveStream      LiveStream[]
}
model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}
model Product {
  id          Int       @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}
model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}
model Comment {
  id          Int       @id @default(autoincrement())
  payload     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId      Int
  postId      Int
}
model Like {
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId      Int
  postId      Int
  @@id(name: "id", [userId, postId])
}
model ChatRoom {
  id          String    @id @default(cuid())
  users       User[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  messages    Message[]
}
model Message {
  id          Int       @id @default(autoincrement())
  payload     String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  room        ChatRoom  @relation(fields: [chatRoomId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  chatRoomId  String
  userId      Int
}
model LiveStream {
  id          Int       @id @default(autoincrement())
  title       String
  stream_key  String
  stream_id   String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}